#!/bin/bash

LOG_FILE="install.log"
STATE_FILE="/tmp/install.state"

exec > >(tee -i "$LOG_FILE") 2>&1
set -u
arch=$(uname -m)

# üé® Couleurs
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
BOLD="\e[1m"
RESET="\e[0m"

function erreur {
    echo -e "${RED}‚ùå Erreur : $1${RESET}"
    echo -e "${YELLOW}‚ö†Ô∏è  Veuillez contacter l'√©diteur${RESET}"
    echo -e "üìß Email : ${CYAN}james.gbetchedji@epitech.eu${RESET}"
    echo -e "üìû Tel : ${CYAN}+22956549199${RESET}"
    exit 1
}

function checkpoint {
    echo "$1" >> "$STATE_FILE"
}

function already_done {
    grep -Fxq "$1" "$STATE_FILE" 2>/dev/null
}

function step {
    local name="$1"
    shift
    if already_done "$name"; then
        echo -e "${YELLOW}üîÅ √âtape '$name' d√©j√† effectu√©e, on passe.${RESET}"
    else
        echo -e "${CYAN}üîß Ex√©cution de l'√©tape : $name${RESET}"
        "$@" || erreur "√âchec √† l'√©tape : $name"
        checkpoint "$name"
    fi
}

function check_root {
    [ "$(id -u)" -eq 0 ] || erreur "Ce script doit √™tre ex√©cut√© en tant que root."
}

function intro {
    clear
    echo -e "${CYAN}${BOLD}"
    echo "üöÄ========================================üöÄ"
    echo "     SCRIPT D'INSTALLATION DU DUMPS"
    echo "             BY ${GREEN}NOGE${CYAN}"
    echo "üöÄ========================================üöÄ"
    echo -e "${RESET}"
    sleep 3
}

function remove_epitech_ppa {
    add-apt-repository --remove ppa:epitech/ppa || true
}

function add_universe {
    add-apt-repository -y -s universe
}

function update_system {
    apt update
    apt upgrade -y
}

function install_packages {
    export DEBIAN_FRONTEND=noninteractive
    apt -y install "${packages_list[@]}"
}

function install_algobox {
    wget -q https://www.xm1math.net/algobox/assets/files/algobox_1.1.1_ubuntu_24_04_amd64.deb -O /tmp/algobox.deb
    dpkg -i /tmp/algobox.deb || apt-get install -f -y
}

function install_docker {
    apt remove -y docker docker.io containerd runc || true
    apt update
    apt -y install ca-certificates curl gnupg apt-transport-https software-properties-common
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
    apt update
    apt install docker-ce -y
    systemctl enable --now docker
}

function install_tools {
    apt purge -y postfix
    if [ "$arch" = "x86_64" ]; then
        snap install teams-for-linux
    fi
}

function install_clang_epiclang {
    apt install -y wget
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | tee /etc/apt/trusted.gpg.d/llvm.asc
    if [ "$arch" = "x86_64" ]; then
        echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/llvm.asc] https://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" | tee /etc/apt/sources.list.d/llvm.list
        wget -O - https://epitech.github.io/epiclang/key.asc | tee /etc/apt/trusted.gpg.d/epiclang-apt.asc
        echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/epiclang-apt.asc] https://epitech.github.io/epiclang/ testing main" | tee /etc/apt/sources.list.d/epiclang.list
    fi else
        echo "deb [arch=arm64 signed-by=/etc/apt/trusted.gpg.d/llvm.asc] https://apt.llvm.org/noble/ llvm-toolchain-noble-20 main" | tee /etc/apt/sources.list.d/llvm.list
        wget -O - https://epitech.github.io/epiclang/key.asc | tee /etc/apt/trusted.gpg.d/epiclang-apt.asc
        echo "deb [arch=arm64 signed-by=/etc/apt/trusted.gpg.d/epiclang-apt.asc] https://epitech.github.io/epiclang/ testing main" | tee /etc/apt/sources.list.d/epiclang.list
    fi
    apt update
    apt install -y clang-20 epiclang
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 100
    update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 100
}

function install_coding_style {
    wget -O - "https://raw.githubusercontent.com/nogebeat/deb-ubuntu-epitech/refs/heads/main/header-epitech.sh" | bash -s
    wget https://raw.githubusercontent.com/Epitech/coding-style-checker/main/coding-style.sh -P /tmp/
    chmod +x /tmp/coding-style.sh
    mv /tmp/coding-style.sh /usr/local/bin/coding-style
}

function setup_user {
    usermod -aG docker $USER
}

function install_new_style {
    cd /tmp
    git clone https://github.com/nogebeat/coding-style-checker.git
    cd coding-style-checker
    chmod +x new-style.sh
    cp new-style.sh /usr/local/bin/new-style
    cp lambdananas /usr/local/bin
    chmod +x /usr/local/bin/lambdananas
}

function final_message {
    clear
    echo -e "${GREEN}${BOLD}"
    echo "‚úÖ================================================‚úÖ"
    echo "   üéâ Installation termin√©e avec succ√®s ! üéâ"
    echo "   üë®‚Äçüíª Coding-Style by ${CYAN}NOGE${GREEN} pr√™t √† l'emploi"
    echo "‚úÖ================================================‚úÖ"
    echo -e "${RESET}"
    echo -e "üí° Commandes disponibles :"
    echo -e "   - ${YELLOW}coding-style . .${RESET} ‚Üí V√©rifier avec le style officiel"
    echo -e "   - ${YELLOW}new-style . .${RESET} ‚Üí V√©rifier avec la version ${MAGENTA}optimis√©e de NOGE${RESET}"
    echo -e "${RED}‚ö†Ô∏è  Pensez √† red√©marrer votre PC apr√®s l'installation !${RESET}"
}

# Liste des paquets
packages_list=(avr-libc build-essential ca-certificates-java cabal-install cargo clang clang-tools cmake curl diffutils elfutils elpa-tuareg emacs-nox ffmpeg flac gcovr ghc golang haskell-stack ksh liballegro5-dev libc-bin libc-dev-bin libc-devtools libc6 libc6-dbg libcsfml-dev libcsfml-doc libcunit1 libcunit1-dev libelf-dev libfreetype-dev libgmp-dev libgmp10 libgmp10-doc libgmp3-dev libgmpxx4ldbl libgudev-1.0-dev libirrlicht-dev libirrlicht1.8 libjpeg-turbo8-dev libncurses-dev libopenal-dev libsdl2-dev libsfml-doc libuuid1 libvirt-dev libvorbis-dev libx11-doc libx11-xcb-dev libxcb-image0 libxcb-image0-dev libxcb-util-dev libxcb-util0-dev libxcb-util1 libxcursor-dev libxext-dev libxext-doc libxi-dev libxinerama-dev libxrandr-dev locales ltrace nasm ncurses-base net-tools npm nodejs openjdk-21-jdk openjdk-21-jre php-bcmath php-dev php-gd php-mbstring php-mysql php-phar-io-version php-tokenizer python3 python3-pycryptodome python3-dev python3-numpy python3-pip python3-pyte python3-requests python3-yaml qt6-base-dev qt6-base-dev-tools rlwrap ruby rustc strace sudo systemd-dev tar tcpdump tcsh tmux tree unzip uuid-dev valgrind vim virt-manager wireshark x264 zip zsh libcriterion-dev libsfml-dev libsfml-doc libc6 libstdc++6 libqt5core5t64 libqt5gui5t64 libqt5network5t64 libqt5widgets5t64 libqt5printsupport5t64 libqt5webchannel5 libqt5webenginewidgets5 libqt5xml5t64)

# Ex√©cution des √©tapes
step "check_root" check_root
step "intro" intro
step "remove_epitech_ppa" remove_epitech_ppa
step "add_universe" add_universe
step "update_system" update_system
step "install_packages" install_packages
step "install_algobox" install_algobox
step "install_docker" install_docker

step "install_tools" install_tools

step "install_clang_epiclang" install_clang_epiclang
step "install_coding_style" install_coding_style
step "setup_user" setup_user
step "install_new_style" install_new_style
step "final_message" final_message
